---

---

<style>
  #starryCanvas {
    display: block;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -10;
    pointer-events: none;
  }
</style>
<canvas id='starryCanvas'></canvas>
<script is:inline>
  const canvas = document.getElementById('starryCanvas');
  const ctx = canvas.getContext('2d');
  const stars = [];
  const MAX_STARS = 500;
  const starColor = 'rgba(255, 255, 255, 0.8)';
  const twinkleSpeed = 0.01;
  let animationFrameId;
  let resizeTimeout;
  let isActive = document.documentElement.classList.contains('dark');

  const calculateStarCount = (width, height) => {
    const area = width * height;
    const baseCount = Math.floor(area / 3000); // Adjust this divisor to tune star density
    return Math.min(baseCount, MAX_STARS);
  };

  const updateCanvasSize = () => {
    const dpr = window.devicePixelRatio || 1;
    const rect = canvas.getBoundingClientRect();

    // Only update if dimensions actually changed
    if (
      canvas.width !== rect.width * dpr ||
      canvas.height !== rect.height * dpr
    ) {
      canvas.width = rect.width * dpr;
      canvas.height = rect.height * dpr;
      ctx.scale(dpr, dpr);
      return true;
    }
    return false;
  };

  const resizeHandler = () => {
    // Clear the previous timeout
    if (resizeTimeout) {
      clearTimeout(resizeTimeout);
    }

    // Throttle resize events
    resizeTimeout = setTimeout(() => {
      if (updateCanvasSize()) {
        initStars();
      }
    }, 250);
  };

  function createStar() {
    return {
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      radius: Math.random() * 1.5,
      opacity: Math.random(),
      twinkleDir: Math.random() > 0.5 ? 1 : -1,
    };
  }

  function initStars() {
    stars.length = 0;
    const width = canvas.width / (window.devicePixelRatio || 1);
    const height = canvas.height / (window.devicePixelRatio || 1);
    const numStars = calculateStarCount(width, height);

    for (let i = 0; i < numStars; i++) {
      const star = createStar();
      star.x = Math.random() * width;
      star.y = Math.random() * height;
      stars.push(star);
    }
  }

  function drawStars() {
    if (!canvas.isConnected) {
      // Clean up if canvas is removed from DOM
      cancelAnimationFrame(animationFrameId);
      window.removeEventListener('resize', resizeHandler);
      return;
    }

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = starColor;

    for (const star of stars) {
      ctx.globalAlpha = star.opacity;
      ctx.beginPath();
      ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
      ctx.fill();
    }
  }

  function updateStars() {
    for (const star of stars) {
      star.opacity += twinkleSpeed * star.twinkleDir;
      if (star.opacity >= 1) {
        star.twinkleDir = -1;
        star.opacity = 1;
      } else if (star.opacity <= 0) {
        star.twinkleDir = 1;
        star.opacity = 0;
      }
    }
  }

  function animateStars() {
    if (!isActive) {
      cancelAnimationFrame(animationFrameId);
      return;
    }

    updateStars();
    drawStars();
    if (canvas.isConnected) {
      animationFrameId = requestAnimationFrame(animateStars);
    }
  }

  function startAnimation() {
    if (isActive && canvas.isConnected) {
      updateCanvasSize();
      initStars();
      cancelAnimationFrame(animationFrameId); // Cancel any existing animation
      animateStars();
    }
  }

  function stopAnimation() {
    cancelAnimationFrame(animationFrameId);
  }

  // Listen for theme changes
  document.addEventListener('themeChanged', (event) => {
    isActive = event.detail.isDark;
    if (isActive) {
      startAnimation();
    } else {
      stopAnimation();
    }
  });

  // Initialize
  window.addEventListener('resize', resizeHandler);

  // Wait for document to be fully loaded
  if (document.readyState === 'complete') {
    startAnimation();
  } else {
    window.addEventListener('load', startAnimation);
  }

  // Ensure the starry background runs when in dark mode on initial load
  if (isActive) {
    startAnimation();
  }
</script>
