---
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import StarryBackground from '../components/StarryBackground.astro';
import { UMAMI_URL, UMAMI_ID, SITE_URL, SITE_TITLE, SITE_AUTHOR } from '../config/config';
import '../styles/global.css';

interface Props {
  title?: string;
  description?: string;
  image?: string;
  type?: string;
  tags?: string[];
  datePublished?: Date;
  isArticle?: boolean;
}

const {
  title,
  description,
  image,
  type = 'website',
  tags,
  datePublished,
  isArticle = false,
} = Astro.props;

// Generate JSON-LD structured data
const jsonLd = {
  "@context": "https://schema.org",
  "@type": isArticle ? "BlogPosting" : "WebSite",
  "url": new URL(Astro.url.pathname, SITE_URL).toString(),
  "name": title || SITE_TITLE,
  ...(isArticle && {
    "headline": title,
    "description": description,
    "image": new URL(image || '', SITE_URL).toString(),
    "datePublished": datePublished ? new Date(datePublished).toISOString() : undefined,
    "dateModified": datePublished ? new Date(datePublished).toISOString() : undefined,
    "keywords": tags?.join(', '),
    "author": {
      "@type": "Person",
      "name": SITE_AUTHOR
    }
  })
};
---

<!doctype html>
<html lang='en'>
  <head>
    <BaseHead 
      title={title}
      description={description}
      image={image}
      type={type}
      tags={tags}
      datePublished={datePublished}
    />
    <script is:inline>
      (function () {
        if (typeof localStorage !== 'undefined') {
          const userTheme = localStorage.getItem('userTheme');
          let theme = localStorage.getItem('theme');

          // If no theme is set or no explicit user preference, check system preference
          if (!theme || !userTheme) {
            theme = window.matchMedia('(prefers-color-scheme: dark)').matches
              ? 'dark'
              : 'light';
            localStorage.setItem('theme', theme);
          }

          // Apply theme immediately to prevent flash
          if (theme === 'dark') {
            document.documentElement.classList.add('dark');
          }

          // Handle system theme changes
          window
            .matchMedia('(prefers-color-scheme: dark)')
            .addEventListener('change', (e) => {
              // Only update if user hasn't explicitly set a preference
              if (!localStorage.getItem('userTheme')) {
                const newTheme = e.matches ? 'dark' : 'light';
                localStorage.setItem('theme', newTheme);
                if (newTheme === 'dark') {
                  document.documentElement.classList.add('dark');
                } else {
                  document.documentElement.classList.remove('dark');
                }

                // Dispatch theme changed event for components
                const event = new CustomEvent('themeChanged', {
                  detail: { isDark: e.matches },
                });
                document.dispatchEvent(event);
              }
            });
        }
      })();
    </script>

    <script is:inline defer src={UMAMI_URL} data-website-id={UMAMI_ID}></script>
    <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
  </head>
  <body class='m-0 overflow-y-auto relative dark:bg-[#171717]'>
    <div class='min-h-screen flex flex-col'>
      <Header />
      <main class='flex-grow mt-4'>
        <slot />
      </main>
      <Footer />
    </div>
    <StarryBackground />
  </body>
</html>
